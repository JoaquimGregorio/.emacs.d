#+TITLE: GNU Emacs Config
#+AUTHOR: Joaquim Gregório
#+DESCRIPTION: My personal Emacs config.
#+STARTUP: overview

* Important! Put this in your init.el 
For the first time you must save *config.org* file to be generated a *config.el* file. Since the auto-tangle is enabled, any change you do in the *config.org* file will rewrite the *config.el* file.
#+begin_example emacs-lisp
(defconst dot-emacs (concat (getenv "HOME") "/.emacs.d/" "config.el")
  "My dot emacs file")

(require 'bytecomp)
(setq compiled-dot-emacs (byte-compile-dest-file dot-emacs))

(if (or (not (file-exists-p compiled-dot-emacs))
	(file-newer-than-file-p dot-emacs compiled-dot-emacs)
        (equal (nth 4 (file-attributes dot-emacs)) (list 0 0)))
    (load dot-emacs)
  (load compiled-dot-emacs))

(add-hook 'kill-emacs-hook
          '(lambda () (and (file-newer-than-file-p dot-emacs compiled-dot-emacs)
                           (byte-compile-file dot-emacs))))

(defun loadup-gen ()
  "Generate the lines to include in the lisp/loadup.el file
to place all of the libraries that are loaded by your InitFile
into the main dumped emacs"
  (interactive)
  (defun get-loads-from-*Messages* ()
    (save-excursion
      (let ((retval ()))
	(set-buffer "*Messages*")
	(beginning-of-buffer)
	(while (search-forward-regexp "^Loading " nil t)
	  (let ((start (point)))
	    (search-forward "...")
	    (backward-char 3)
	    (setq retval (cons (buffer-substring-no-properties start (point)) retval))))
	retval))))

(loadup-gen)

;; time the loading of the .emacs
;; keep this on top of your .emacs
(defvar *emacs-load-start* (current-time))
(defun anarcat/time-to-ms (time)
  (+ (* (+ (* (car time) (expt 2 16)) (car (cdr time))) 1000000) (car (cdr (cdr time)))))
(defun anarcat/display-timing ()
  (message ".emacs loaded in %fms" (/ (- (anarcat/time-to-ms (current-time)) (anarcat/time-to-ms *emacs-load-start*)) 1000000.0)))
(add-hook 'after-init-hook 'anarcat/display-timing t)
#+end_example
* Load First
** Startup performance
#+begin_src emacs-lisp :tangle yes
;; Minimize garbage collection during startup
(setq gc-cons-threshold most-positive-fixnum) 

;; Increase the amount of data which Emacs reads from the process#
;; Again the emacs default is too low 4k considering that the some of the language server responses are in 800k - 3M range.
(setq read-process-output-max (* 1024 1024)) ;; 1mb

;; Lower threshold back to 8 MiB (default is 800kB)
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold (expt 2 23))))

(defun efs/display-startup-time ()
(message "Emacs loaded in %s with %d garbage collections."
        (format "%.2f seconds"
                (float-time
                    (time-subtract after-init-time before-init-time)))
        gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src
** Initialize Package Sources 
#+begin_src emacs-lisp :tangle yes
;; Initialize package sources
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                        ("org" . "https://orgmode.org/elpa/")
                        ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
(package-refresh-contents))

;; Initialize use-package on non-linux platforms
;;(unless (package-installed-p 'use-package)
;;(package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** Files
#+begin_src emacs-lisp :tangle yes
;; make backup to a designated dir, mirroring the full path
(defun my-backup-file-name (fpath)
  "Return a new file path of a given file path.
If the new path's directories does not exist, create them."
  (let* (
        (backupRootDir "~/.emacs.d/emacs-backup/")
        (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, ➢ for example: “C:”
        (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
        )
    (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
    backupFilePath
  )
)

(setq make-backup-file-name-function 'my-backup-file-name)
;; stop creating #autosave# files
(setq auto-save-default nil)
#+end_src
** Evil Mode

#+begin_src emacs-lisp :tangle yes
  (use-package evil
  :defer t
  :init      ;; tweak evil's configuration before loading it
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))
  (use-package evil-tutor)
  (use-package evil-collection
    :defer t
    :after (evil)
    :config
    (setq evil-collection-mode-list '(dired)) ;; for dired work properly
    (evil-collection-init))
#+end_src

* UI
** Dashboard
#+begin_src emacs-lisp :tangle yes
  ;; If the dashboard doesn`t word after init, create ~/Org/{Tasks.org,Birthdays.org,Habits.org} files
  (use-package dashboard
    :defer nil
    :ensure t
    :config
    (setq dashboard-items '((recents . 5)
                      (projects . 4)
                      (bookmarks . 3))
        dashboard-startup-banner 'logo
        dashboard-center-content t
        dashboard-show-shortcuts nil
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name
        dashboard-week-agenda nil)
    (dashboard-setup-startup-hook))
    ;; Mandatory to get dashboard when using `emacsclient -c`
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
** Centaur tabs
#+begin_src emacs-lisp :tangle yes
  (use-package centaur-tabs
    :defer t
    :config
       (setq centaur-tabs-style "bar"
              centaur-tabs-height 24
              centaur-tabs-set-icons t
              centaur-tabs-set-modified-marker t
              centaur-tabs-close-button "✕"
              centaur-tabs-modified-marker "•"
              centaur-tabs-set-bar 'over
              x-underline-at-descent-line t)
       (centaur-tabs-headline-match)
       ;; (setq centaur-tabs-gray-out-icons 'buffer)
       ;; (centaur-tabs-enable-buffer-reordering)
       ;; (setq centaur-tabs-adjust-buffer-order t)
       (centaur-tabs-mode t)
       (setq uniquify-separator "/")
       (setq uniquify-buffer-name-style 'forward)
       (defun centaur-tabs-buffer-groups ()
         "`centaur-tabs-buffer-groups' control buffers' group rules.

     Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
     All buffer name start with * will group to \"Emacs\".
     Other buffer group by `centaur-tabs-get-group-name' with project name."
         (list
          (cond
            ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
            ;; "Remote")
            ((or (string-equal "*" (substring (buffer-name) 0 1))
                 (memq major-mode '(magit-process-mode
                                    magit-status-mode
                                    magit-diff-mode
                                    magit-log-mode
                                    magit-file-mode
                                    magit-blob-mode
                                    magit-blame-mode
                                    )))
             "Emacs")
            ((derived-mode-p 'prog-mode)
             "Editing")
            ((derived-mode-p 'dired-mode)
             "Dired")
            ((memq major-mode '(helpful-mode
                                help-mode))
             "Help")
            ((memq major-mode '(org-mode
                                org-agenda-clockreport-mode
                                org-src-mode
                                org-agenda-mode
                                org-beamer-mode
                                org-indent-mode
                                org-bullets-mode
                                org-cdlatex-mode
                                org-agenda-log-mode
                                diary-mode))
             "OrgMode")
            (t
             (centaur-tabs-get-group-name (current-buffer))))))
    :hook
    (dashboard-mode . centaur-tabs-local-mode)
    (term-mode . centaur-tabs-local-mode)
    (vterm-mode . centaur-tabs-local-mode)
    (calendar-mode . centaur-tabs-local-mode)
    (org-mode . centaur-tabs-local-mode)
    (org-agenda-mode . centaur-tabs-local-mode)
    (helpful-mode . centaur-tabs-local-mode)
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward)
    ("C-c t s" . centaur-tabs-counsel-switch-group)
    ("C-c t p" . centaur-tabs-group-by-projectile-project)
    ("C-c t g" . centaur-tabs-group-buffer-groups)
    (:map evil-normal-state-map
           ("g t" . centaur-tabs-forward)
           ("g T" . centaur-tabs-backward)))

    (global-set-key (kbd "C-x t e") #'centaur-tabs-mode)
#+end_src
** hl-todo
#+begin_src emacs-lisp :tangle yes
    (use-package hl-todo
      :defer t
      :config
      (setq hl-todo-highlight-punctuation ":"
            hl-todo-keyword-faces
            `(;; For things that need to be done, just not today.
              ("TODO" warning bold)
              ;; For problems that will become bigger problems later if not
              ;; fixed ASAP.
              ("FIXME" error bold)
              ;; For tidbits that are unconventional and not intended uses of the
              ;; constituent parts, and may break in a future update.
              ("HACK" font-lock-constant-face bold)
              ;; For things that were done hastily and/or hasn't been thoroughly
              ;; tested. It may not even be necessary!
              ("REVIEW" font-lock-keyword-face bold)
              ;; For especially important gotchas with a given implementation,
              ;; directed at another user other than the author.
              ("NOTE" success bold)
              ;; For things that just gotta go and will soon be gone.
              ("DEPRECATED" font-lock-doc-face bold)
              ;; For a known bug that needs a workaround
              ("BUG" error bold)
              ;; For warning about a problematic or misguiding code
              ("XXX" font-lock-constant-face bold))))

  (global-hl-todo-mode)
#+end_src
** Font Configuration

#+begin_src emacs-lisp :tangle yes
  (defun efs/set-font-faces ()
    (message "Setting faces!")
    (set-face-attribute 'default nil :font "FiraCode NF" :height 105)

    ;; Set the fixed pitch face
    (set-face-attribute 'fixed-pitch nil :font "FiraCode NF" :height 105)

    ;; Set the variable pitch face
    (set-face-attribute 'variable-pitch nil :font "FiraCode NF" :height 105))

  (if (daemonp)
          (add-hook 'after-make-frame-functions
                (lambda (frame)
                (setq doom-modeline-icon t)
                (with-selected-frame frame
                    (efs/set-font-faces))))
      (efs/set-font-faces))
#+end_src

** Ui Improvements

#+begin_src emacs-lisp :tangle yes
  ;; (setq inhibit-startup-message t) ; don't show startup screen
  (scroll-bar-mode -1) ; Disable visible scrollbar
  (tool-bar-mode -1) ; Disable the toolbar
  (tooltip-mode -1) ; Disable tooltips
  (set-fringe-mode 10) ; Give some breathing room
  (menu-bar-mode -1) ; Disable the menu bar
  (setq visible-bell t) ; Set up the visible bell

  ;; Disable all GUI popups and tooltips
  (setq use-dialog-box nil)

  ;; Wrap words
  (add-hook 'text-mode-hook 'visual-line-mode)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha '(95 . 95))
  (add-to-list 'default-frame-alist `(alpha . ,'(95 . 95)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Cursor shape
  (setq-default cursor-type 'hbar)
  (set-cursor-color "#ffffff") ;; or box, hollow, hbar

  ;; DocView
  ;; (setq doc-view-continuous t)
  #+end_src

** Theme
#+begin_src emacs-lisp :tangle yes
;;Set up some theme
(use-package doom-themes
  :defer 1
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-dracula t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src
*** Doom
#+begin_src emacs-lisp :tangle yes
  (use-package all-the-icons :defer t :ensure t)

  ;;Doom mode line
  (use-package doom-modeline
    :defer t
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

** Yafolding
#+begin_src emacs-lisp :tangle yes
  (use-package yafolding :defer t)
  (defvar yafolding-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "<C-S-return>") #'yafolding-hide-parent-element)
    (define-key map (kbd "<C-M-return>") #'yafolding-toggle-all)
    (define-key map (kbd "<C-return>") #'yafolding-toggle-element)
    map))
#+end_src
** Emoji
#+begin_src emacs-lisp :tangle yes
  (use-package emojify
    :defer t
    :hook (after-init . global-emojify-mode))
#+end_src
* Org mode
Org Mode is one of the hallmark features of Emacs. It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.
** Better Font Faces
The efs/org-font-setup function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we’re editing a document in org-mode. We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.
 #+begin_src emacs-lisp :tangle yes
   (defun efs/org-font-setup ()
   ;; Replace list hyphen with dot
   (font-lock-add-keywords 'org-mode
			   '(("^ *\\([-]\\) "
			      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

   ;; Set faces for heading levels
   (dolist (face '((org-level-1 . 1.2)
		   (org-level-2 . 1.1)
		   (org-level-3 . 1.05)
		   (org-level-4 . 1.0)
		   (org-level-5 . 1.1)
		   (org-level-6 . 1.1)
		   (org-level-7 . 1.1)
		   (org-level-8 . 1.1)))
     (set-face-attribute (car face) nil :font "FiraCode NF" :height (cdr face)))

   ;; Ensure that anything that should be fixed-pitch in Org files appears that way
   (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
   (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
   (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
   (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
   (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
   (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
   (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
   (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
   (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))
  (defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))
#+end_src
** Basic Config
This section contains the basic configuration for org-mode plus the configuration for Org agendas and capture templates.
#+begin_src emacs-lisp :tangle yes
  (use-package org
    :defer t
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/Org/Tasks.org"
            "~/Org/Habits.org"
            "~/Org/Birthdays.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
        ("Tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/Org/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/Org/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/Org/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/Org/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline "~/Org/Metrics.org" "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (efs/org-font-setup))
 #+end_src
** Nicer Heading Bullets
org-bullets replaces the heading stars in org-mode buffers with nicer looking characters that you can control.
#+begin_src emacs-lisp :tangle yes
  (use-package org-bullets
    :defer t
    :hook (org-mode . org-bullets-mode))
    ;; :custom
    ;; (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
** Center Org Buffers

We use visual-fill-column to center org-mode buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document. This is really a matter of personal preference so you can remove the block below if you don’t like the behavior.
#+begin_src emacs-lisp :tangle yes
  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :defer t
    :ensure t
    :hook (org-mode . efs/org-mode-visual-fill))
#+end_src
** Configure Babel Languages
To execute or export code in org-mode code blocks, you’ll need to set up org-babel-load-languages for each language you’d like to use. This page documents all of the languages that you can use with org-babel.
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'org
  (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
      (python . t)
      (C . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src
** Structure Templates
Org Mode’s structure templates feature enables you to quickly insert code blocks into your Org files in combination with org-tempo by typing < followed by the template name like el or py and then press TAB. For example, to insert an empty emacs-lisp block below, you can type <el and press TAB to expand into such a block.

You can add more src block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language as it is known by Org Babel.
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("cc" . "src C")))
#+end_src
** Auto-tangle Configuration Files
This snippet adds a hook to org-mode buffers so that efs/org-babel-tangle-config gets executed each time such a buffer gets saved. This function checks to see if the file being saved is the Emacs.org file you’re looking at right now, and if so, automatically exports the configuration here to the associated output files.
#+begin_src emacs-lisp :tangle yes
;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (string-equal (file-name-directory (buffer-file-name))
                      (expand-file-name user-emacs-directory))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src
* Keybindings

#+begin_src emacs-lisp :tangle yes
;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
;; Adjust text scale
;;(global-set-key (kbd "C--") 'text-scale-decrease)
;;(global-set-key (kbd "C-=") 'text-scale-increase)

;; See keybindings
(use-package command-log-mode)
#+end_src

* Ivy

#+begin_src emacs-lisp :tangle yes
  ;; Use Ivy and Counsel for completions
  (use-package ivy
    :defer t
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-wrap t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)

    ;; Use different regex strategies per completion command
    (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist)
    (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
    (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

    ;; Set minibuffer height for different commands
    (setf (alist-get 'swiper ivy-height-alist) 15)
    (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7))

  (use-package counsel
    :defer t
    :init
    :bind (("M-x" . counsel-M-x)
           ;; ("C-x b" . counsel-ibuffer)
           ("C-x b" . counsel-switch-buffer)
           ("C-x C-f" . counsel-find-file)
           ;; ("C-M-j" . 'counsel-switch-buffer)
           ("C-M-j" . 'counsel-ibuffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1)
    (setq ivy-initial-inputs-alist nil))  ;; Don't start searches with ^

   ;; Ivy rich
   (use-package ivy-rich
     :defer t
     :init
     (ivy-rich-mode 1))
#+end_src

* Which key
#+begin_src emacs-lisp :tangle yes
  ;; Which key
  (use-package which-key
    :defer t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.4))
#+end_src
* Usefull Plugins
** Helpful

#+begin_src emacs-lisp :tangle yes
  (use-package helpful
    :defer t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Language Server Protocol (LSP)
  With above setup done, below we will setup several packages closely related to LSP.
** Run Code
We can use quickrun package to execute code (if it has main). E.g. If you have a java file with main method, it will run with the associated shortcut key ~C-c r~ or quickrun command. Quickrun has support for several languages.
#+begin_src emacs-lisp :tangle yes
(use-package quickrun 
:defer t
:bind ("C-c r" . quickrun))
#+end_src

** Yasnippet
Yasnippet is a template system for Emacs. It allows you to type abbreviation and complete the associated text.

#+begin_src emacs-lisp :tangle yes
(use-package yasnippet :defer t)
(use-package yasnippet-snippets :defer t)
#+end_src

E.g. In java mode, if you type ~pr~ and hit ~<TAB>~ it should complete to ~System.out.println("text");~

To create a new snippet you can use ~yas-new-snippet~ command. 

** Treemacs
Treemacs provides UI elements used for LSP UI. Let's install lsp-treemacs and its dependency treemacs. We will also Assign ~M-9~ to show error list.
#+begin_src emacs-lisp :tangle yes
  (use-package lsp-treemacs
    :defer t
    :after (lsp-mode treemacs)
    :commands lsp-treemacs-errors-list
    :bind (:map lsp-mode-map
           ("M-9" . lsp-treemacs-errors-list)))

  (use-package treemacs
    :defer t
    :commands (treemacs)
    :after (lsp-mode))

  (use-package treemacs-all-the-icons
    :defer t
    :config (treemacs-load-theme "all-the-icons"))

  (global-set-key (kbd "M-n") 'treemacs)
#+end_src

** LSP UI
lsp-ui is a set of UI enhancements built on top of lsp-mode which make Emacs feel even more like an IDE. Check out the screenshots on the lsp-ui homepage (linked at the beginning of this paragraph) to see examples of what it can do.
#+begin_src emacs-lisp :tangle yes
  (use-package lsp-ui
    :defer t
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom)) ;; or at-point, top

#+end_src
** Ivy
#+begin_src emacs-lisp :tangle yes
  (use-package lsp-ivy
    :defer t
    :after lsp)
#+end_src
** Dap Mode
Emacs Debug Adapter Protocol aka DAP Mode allows us to debug your program. Below we will integrate ~dap-mode~ with ~dap-hydra~. ~Dap-hydra~ shows keys you can use to enable various options and jump through code at runtime. After we install dap-mode we will also install ~dap-java~.

#+begin_src emacs-lisp :tangle yes
(use-package dap-mode
  :defer t
  :commands dap-debug
  :config
  (add-hook 'dap-stopped-hook
            (lambda (arg) (call-interactively #'dap-hydra)))

  ;; Enabling only some features
  ;; (setq dap-auto-configure-features '(sessions locals controls tooltip))

  ;; Or if you want to enable only specific modes instead:
  (dap-mode 1)
  ;; The modes below are optional
  (dap-ui-mode 1)
  ;; enables mouse hover support
  (dap-tooltip-mode 1)
  ;; use tooltips for mouse hover
  ;; if it is not enabled `dap-mode' will use the minibuffer.
  (tooltip-mode 1)
  ;; displays floating panel with debug buttons
  ;; requies emacs 26+
  (dap-ui-controls-mode 1))
#+end_src

** Company
Complete anything aka Company provides auto-completion. Company-capf is enabled by default when you start LSP on a project. You can also invoke ~M-x company-capf~ to enable capf (completion at point function).
#+begin_src emacs-lisp :tangle yes
  (use-package company
    :defer t
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :defer t
    :hook (company-mode . company-box-mode))
#+end_src
** Projectile
Projectile is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages. Many packages integrate with Projectile so it’s a good idea to have it installed even if you don’t use its commands directly.
#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :defer t
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Dev")
      (setq projectile-project-search-path '("~/Dev")))
    (when (file-directory-p "~/Repos")
      (setq projectile-project-search-path '("~/Repos")))
    (when (file-directory-p "~/.emacs.d")
      (setq projectile-project-search-path '("~/.emacs.d")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src
  
** Magit
Magit is the best Git interface I’ve ever used. Common Git operations are easy to execute quickly using Magit’s command panel system.
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :defer t
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (setq magit-auto-revert-mode nil)

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :defer t
    :after magit)
#+end_src
** Git Gutter
#+begin_src emacs-lisp :tangle yes
  (use-package git-gutter
    :defer t
    :config
    (global-git-gutter-mode +1))
#+end_src
** Commenting
Emacs’ built in commenting functionality comment-dwim (usually bound to M-;) doesn’t always comment things in the way you might expect so we use evil-nerd-commenter to provide a more familiar behavior. I’ve bound it to M-/ since other editors sometimes use this binding but you could also replace Emacs’ M-; binding with this command.
#+begin_src emacs-lisp :tangle yes
  (use-package evil-nerd-commenter
    :defer t
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src
** Formatter
#+begin_src emacs-lisp :tangle yes
(use-package format-all :defer t)
;; Format on save for most programming languages
(add-hook 'prog-mode-hook 'format-all-mode)
;; To ensure a formatter is set whenever `format-all-mode` is enabled
(add-hook 'format-all-mode-hook 'format-all-ensure-formatter)
#+end_src
** Rainbow Delimiters
rainbow-delimiters is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.
#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :defer t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Auto pairs
#+begin_src emacs-lisp :tangle yes
(electric-pair-mode)
#+end_src
** Install LSP Package
Let's install the main package for lsp. Here we will integrate lsp with which-key. This way, when we type the prefix key ~C-c l~ we get additional help for compliting the command. 

#+begin_src emacs-lisp :tangle yes
  (use-package lsp-mode
    :defer t
    :init
    (setq lsp-keymap-prefix "C-c l") ;; or "C-c l", "s-l"
    :hook (lsp-mode . lsp-enable-which-key-integration)
    :config
    (setq lsp-completion-enable-additional-text-edit nil
          lsp-headerline-breadcrumb-enable nil
          lsp-completion-show-detail t
          lsp-ui-doc-enable t)
    (define-key lsp-mode-map (kbd "C-SPC") #'company-complete)
    :commands (lsp lsp-deferred))
#+end_src 

You can start LSP server in a java project by using ~C-c l s s~. Once you type ~C-c l~ ~which-key~ package should guide you through rest of the options. In above setting I have added some memory management settings as suggested in [[https://emacs-lsp.github.io/lsp-mode/page/performance/][this guide]]. Change them to higher numbers, if you find *lsp-mode* sluggish in your computer.

** Emmet mode

#+begin_src emacs-lisp :tangle yes
  (use-package emmet-mode
    :defer t
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
  )
#+end_src

** Languages
*** Angular
#+begin_src emacs-lisp :tangle yes
(use-package lsp-mode
  :hook ((angular-ls . lsp-deferred)
         (angular-ls . tree-sitter-hl-mode)
         (angular-ls . yas-global-mode)))
#+end_src
*** Java
This is the package that handles server installation and session management.
#+begin_src emacs-lisp :tangle yes
(use-package lsp-java
  :defer t
  :hook ((java-mode . lsp-deferred)
         (java-mode . tree-sitter-hl-mode)
         (java-mode . yas-global-mode))
  :config
  (add-hook 'java-mode-hook 'lsp)
  (add-hook 'java-mode-hook #'lsp-java-boot-lens-mode))
(use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
(require 'dap-java)
(use-package gradle-mode
  :config
  (gradle-mode 1))
#+end_src** Java
  
*** JSON
#+begin_src emacs-lisp :tangle yes
  (use-package json-mode
    :defer t
    :hook ((json-mode . lsp-deferred)
           (json-mode . tree-sitter-hl-mode)
           (json-mode . yas-global-mode)))
#+end_src
*** Typescript
#+begin_src emacs-lisp :tangle yes
  (use-package typescript-mode
    :defer t
    :mode "\\.ts\\'"
    :hook ((typescript-mode . tide-setup)
            (typescript-mode . tide-hl-identifier-mode)
            (typescript-mode . tree-sitter-hl-mode)
            (typescript-mode . yas-global-mode)
            (before-save . tide-format-before-save))
    :config
    (setq typescript-indent-level 2)
    (require 'dap-firefox)) ;; to load the dap adapter for your language

  (use-package tide
    :defer t
    :after (typescript-mode company flycheck))
#+end_src 
*** HTML
#+begin_src emacs-lisp :tangle yes
(use-package lsp-mode
  :hook ((html-ls . lsp-deferred)
         (html-ls . tree-sitter-hl-mode)
         (html-ls . yas-global-mode)))
#+end_src
*** CSS/LessCSS/SASS/SCSS
#+begin_src emacs-lisp :tangle yes
(use-package lsp-mode
  :hook ((css-ls . lsp-deferred)
         (css-ls . tree-sitter-hl-mode)
         (css-ls . yas-global-mode)))
#+end_src

*** Python
#+begin_src emacs-lisp :tangle yes
(use-package python-mode)
  :defer t
  (use-package lsp-pyright
    :after python-mode
    :defer t
    :hook ((python-mode . lsp-deferred)
           (python-mode . company-mode)
           (python-mode . tree-sitter-hl-mode)
           (python-mode . yas-global-mode))
    :config (require 'dap-python))
#+end_src
*** Rust
#+begin_src emacs-lisp :tangle yes
  (use-package rust-mode
    :defer t
    :after dap-mode
    :hook ((rust-mode . lsp-deferred)
          (rust-mode . tree-sitter-hl-mode)
          (rust-mode . yas-global-mode))
    :config (setq rust-format-on-save t))
  (add-hook 'rust-mode-hook (lambda () (setq indent-tabs-mode nil)))
#+end_src
** Tree-sitter
#+begin_src emacs-lisp :tangle yes
  (use-package tree-sitter
    :defer t
    :after (lsp-mode rainbow-delimiters ivy counsel ivy-rich))
  (use-package tree-sitter-langs
    :defer t
    :after tree-sitter)
#+end_src
* Terminals
** term-mode
=term-mode= is a built-in terminal emulator in Emacs.  Because it is written in Emacs Lisp, you can start using it immediately with very little configuration.  If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably.  However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=.  The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=.  =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal.  While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings.  If you're just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil's insert mode (press =i=).  You will automatically be switched back to =line-mode= when you enter Evil's normal mode (press =ESC=).

Run a terminal with =M-x term!=

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil's Insert mode

#+begin_src emacs-lisp :tangle yes
  (use-package term
    :defer t
    :commands term
    :config
    (setq explicit-shell-file-name "fish") ;; Change this to zsh, etc
    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+end_src

*** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to.  Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program.  Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** vterm
[[https://github.com/akermu/emacs-libvterm/][vterm]] is an improved terminal emulator package which uses a compiled native module to interact with the underlying terminal applications.  This enables it to be much faster than =term-mode= and to also provide a more complete terminal emulation experience.

Make sure that you have the [[https://github.com/akermu/emacs-libvterm/#requirements][necessary dependencies]] installed before trying to use =vterm= because there is a module that will need to be compiled before you can use it successfully.

#+begin_src emacs-lisp :tangle yes
  (use-package vterm
    :defer t
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    (setq vterm-shell "fish")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))
#+end_src
* File Management
** Dired
Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:
*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp :tangle yes

  (use-package dired
    :defer t
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")))

  (use-package dired-single
    :defer t
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :defer t
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :defer t
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

#+end_src
* PDF
#+begin_src emacs-lisp :tangle yes
(use-package pdf-tools
  :defer t
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :magic ("%PDF" . pdf-view-mode)
  :init (pdf-view-mode)
  :config
  (pdf-tools-install)

  (setq-default pdf-view-display-size 'fit-page)
  ;; Enable hiDPI support, but at the cost of memory! See politza/pdf-tools#51
  (setq pdf-view-use-scaling t
        pdf-view-use-imagemagick nil)

  ;; The mode-line does serve any useful purpose is annotation windows
  (add-hook 'pdf-annot-list-mode-hook #'hide-mode-line-mode)

(use-package saveplace-pdf-view
  :defer t
  :after pdf-view)
#+end_src>
* Comments
  - ~M-x package-refresh-contents~ can be used to refresh (m)elpa packages if (m)elpa cannot find some package.
